{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useLayoutEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport { Flip } from \"gsap/Flip\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\nfunction Animation() {\n  _s();\n  useLayoutEffect(() => {\n    // -- 여기 애니메이션 코드 --\n    gsap.registerPlugin(Flip);\n    gsap.registerPlugin(ScrollTrigger);\n    let wheel = document.querySelector(\".wheel\");\n    let images = gsap.utils.toArray(\".wheel__card\"); // image 들을 배열로 만들어 변수에 할당\n    gsap.to(\".title\", {\n      x: 5,\n      ease: \"power1.inOut\",\n      repeat: -1,\n      yoyo: true\n    });\n    gsap.to(\".title\", {\n      y: 5,\n      ease: \"power1.inOut\",\n      repeat: -1,\n      yoyo: true\n    });\n    gsap.to(\".arrow\", {\n      y: 5,\n      ease: \"power1.inOut\",\n      repeat: -1,\n      yoyo: true\n    });\n\n    // arrow 클래스를 y방향으로 5만큼 이동\n    function setup() {\n      let radius = wheel.offsetWidth / 2; // wheel.offsetWidth : wheel 요소의 전체 크기\n      let center = wheel.offsetWidth / 2;\n      let total = images.length;\n      let slice = 2 * Math.PI / total; // image 갯수로 slice 할당\n\n      images.forEach((item, i) => {\n        let angle = i * slice;\n        let x = center + radius * Math.sin(angle);\n        let y = center - radius * Math.cos(angle);\n        gsap.set(item, {\n          rotation: angle + \"_rad\",\n          xPercent: -50,\n          yPercent: -50,\n          x: x,\n          y: y\n        });\n      });\n    }\n\n    // let x = 1000; // 1000일 때 가운데\n    // let y = 0; // 일때 whell 제일 위에 위치, 값이 높아 질수록 중심으로 이동\n    // set 메소드는 속성을 즉시 설정한다.(세팅)\n    //  test 클래스 요소가 opacity가 1일때  gsap.to(test, 0.5, {opacity : 1});   opacity가 0에서 0.5초 동안 1로 변함\n    //\n    //  test 클래스 요소가 opacity가 1일때  gsap.from(test, 0.5, {opacity : 1});   opacity가 0에서 0.5초 동안 1로 변함\n\n    setup();\n    window.addEventListener(\"resize\", setup);\n    // 스크롤 회전\n    gsap.to(\".wheel\", {\n      rotate: () => -360,\n      ease: \"none\",\n      duration: images.length,\n      scrollTrigger: {\n        start: 0,\n        end: \"max\",\n        scrub: 1,\n        snap: 1 / images.length,\n        invalidateOnRefresh: true\n      }\n    });\n    let cards = gsap.utils.toArray(\".wheel__card\");\n    let header = document.querySelector(\".header\");\n\n    // keep track of last clicked card so we can put it back\n    let lastClickedCard;\n    cards.forEach(card => {\n      card.addEventListener(\"click\", e => {\n        if (lastClickedCard) {\n          putBack(e);\n        }\n        flip(e);\n      });\n    });\n    header.addEventListener(\"click\", e => {\n      if (!lastClickedCard) return;\n      putBack(e);\n    });\n\n    // function removeContent(e) {\n    //   let image = header.querySelector(\"img\");\n    //   let content = header.querySelector(\".content\");\n    //   let state = Flip.getState(content);\n\n    //   content.remove();\n    //   Flip.from(state, {\n    //     duration: 0.6,\n    //     ease: \"sine.out\",\n    //     absolute: true,\n    //   });\n    // }\n\n    function putBack(e) {\n      let image = header.querySelector(\"img\");\n      let state = Flip.getState(image);\n      lastClickedCard.appendChild(image);\n      Flip.from(state, {\n        duration: 0.6,\n        ease: \"sine.out\",\n        absolute: true\n      });\n      lastClickedCard = null;\n    }\n    function flip(e) {\n      let fragment = document.createElement(\"div\");\n      fragment.classList.add(\"content\");\n      let image = e.target.querySelector(\"img\");\n      let state = Flip.getState(image);\n      header.appendChild(image);\n      header.appendChild(fragment);\n      // fragment.appendChild(image);\n      image.classList.add(\"select\");\n      Flip.from(state, {\n        duration: 0.6,\n        ease: \"sine.out\",\n        absolute: true\n      });\n      lastClickedCard = e.target;\n    }\n\n    // 클릭시 이미지 커지는 기능\n  }, []); // <- 종속성 배열을 비우므로 모든 렌더링에서 다시 실행되지 않습니다!\n}\n_s(Animation, \"n7/vCynhJvM+pLkyL2DMQUF0odM=\");\n_c = Animation;\nvar _c;\n$RefreshReg$(_c, \"Animation\");","map":{"version":3,"names":["useLayoutEffect","gsap","Flip","ScrollTrigger","Animation","registerPlugin","wheel","document","querySelector","images","utils","toArray","to","x","ease","repeat","yoyo","y","setup","radius","offsetWidth","center","total","length","slice","Math","PI","forEach","item","i","angle","sin","cos","set","rotation","xPercent","yPercent","window","addEventListener","rotate","duration","scrollTrigger","start","end","scrub","snap","invalidateOnRefresh","cards","header","lastClickedCard","card","e","putBack","flip","image","state","getState","appendChild","from","absolute","fragment","createElement","classList","add","target"],"sources":["/Users/minhyunglee/Desktop/Project/MovieRank/movie_rank/src/Animation.js"],"sourcesContent":["import { useLayoutEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport { Flip } from \"gsap/Flip\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\nfunction Animation() {\n  useLayoutEffect(() => {\n    // -- 여기 애니메이션 코드 --\n    gsap.registerPlugin(Flip);\n    gsap.registerPlugin(ScrollTrigger);\n\n    let wheel = document.querySelector(\".wheel\");\n    let images = gsap.utils.toArray(\".wheel__card\"); // image 들을 배열로 만들어 변수에 할당\n    gsap.to(\".title\", { x: 5, ease: \"power1.inOut\", repeat: -1, yoyo: true });\n    gsap.to(\".title\", { y: 5, ease: \"power1.inOut\", repeat: -1, yoyo: true });\n    gsap.to(\".arrow\", { y: 5, ease: \"power1.inOut\", repeat: -1, yoyo: true });\n\n    // arrow 클래스를 y방향으로 5만큼 이동\n    function setup() {\n      let radius = wheel.offsetWidth / 2; // wheel.offsetWidth : wheel 요소의 전체 크기\n      let center = wheel.offsetWidth / 2;\n      let total = images.length;\n      let slice = (2 * Math.PI) / total; // image 갯수로 slice 할당\n\n      images.forEach((item, i) => {\n        let angle = i * slice;\n\n        let x = center + radius * Math.sin(angle);\n        let y = center - radius * Math.cos(angle);\n\n        gsap.set(item, {\n          rotation: angle + \"_rad\",\n          xPercent: -50,\n          yPercent: -50,\n          x: x,\n          y: y,\n        });\n      });\n    }\n\n    // let x = 1000; // 1000일 때 가운데\n    // let y = 0; // 일때 whell 제일 위에 위치, 값이 높아 질수록 중심으로 이동\n    // set 메소드는 속성을 즉시 설정한다.(세팅)\n    //  test 클래스 요소가 opacity가 1일때  gsap.to(test, 0.5, {opacity : 1});   opacity가 0에서 0.5초 동안 1로 변함\n    //\n    //  test 클래스 요소가 opacity가 1일때  gsap.from(test, 0.5, {opacity : 1});   opacity가 0에서 0.5초 동안 1로 변함\n\n    setup();\n\n    window.addEventListener(\"resize\", setup);\n    // 스크롤 회전\n    gsap.to(\".wheel\", {\n      rotate: () => -360,\n      ease: \"none\",\n      duration: images.length,\n      scrollTrigger: {\n        start: 0,\n        end: \"max\",\n        scrub: 1,\n        snap: 1 / images.length,\n        invalidateOnRefresh: true,\n      },\n    });\n\n    let cards = gsap.utils.toArray(\".wheel__card\");\n    let header = document.querySelector(\".header\");\n\n    // keep track of last clicked card so we can put it back\n    let lastClickedCard;\n\n    cards.forEach((card) => {\n      card.addEventListener(\"click\", (e) => {\n        if (lastClickedCard) {\n          putBack(e);\n        }\n        flip(e);\n      });\n    });\n\n    header.addEventListener(\"click\", (e) => {\n      if (!lastClickedCard) return;\n      putBack(e);\n    });\n\n    // function removeContent(e) {\n    //   let image = header.querySelector(\"img\");\n    //   let content = header.querySelector(\".content\");\n    //   let state = Flip.getState(content);\n\n    //   content.remove();\n    //   Flip.from(state, {\n    //     duration: 0.6,\n    //     ease: \"sine.out\",\n    //     absolute: true,\n    //   });\n    // }\n\n    function putBack(e) {\n      let image = header.querySelector(\"img\");\n      let state = Flip.getState(image);\n\n      lastClickedCard.appendChild(image);\n\n      Flip.from(state, {\n        duration: 0.6,\n        ease: \"sine.out\",\n        absolute: true,\n      });\n\n      lastClickedCard = null;\n    }\n\n    function flip(e) {\n      let fragment = document.createElement(\"div\");\n      fragment.classList.add(\"content\");\n\n      let image = e.target.querySelector(\"img\");\n\n      let state = Flip.getState(image);\n\n      header.appendChild(image);\n      header.appendChild(fragment);\n      // fragment.appendChild(image);\n      image.classList.add(\"select\");\n      Flip.from(state, {\n        duration: 0.6,\n        ease: \"sine.out\",\n        absolute: true,\n      });\n\n      lastClickedCard = e.target;\n    }\n\n    // 클릭시 이미지 커지는 기능\n  }, []); // <- 종속성 배열을 비우므로 모든 렌더링에서 다시 실행되지 않습니다!\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}